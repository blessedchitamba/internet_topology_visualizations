#!/usr/bin/env python3

#############################################################################
## Convenience tool for exploring/testing the MIDAR web API.
##
#############################################################################

"""Usage:
  midar-api [options] upload <TARGET_PATH>
  midar-api [options] status <RESULT_ID>
  midar-api [options] get <RESULT_ID>
  midar-api (-h | --help)
  midar-api --version

Options:
  --name STR    Task name (for 'upload').
  --out PATH    Path for MIDAR results (for 'get').
  --key STR     MIDAR API key.
  --url URL     MIDAR API base URL [default: https://vela.caida.org/midar-api].
  --timeout NUM  HTTP request timeout (secs) [default: 120].
  --debug       Print additional debugging information.
  -h --help     Show this screen.
  --version     Show version.
"""

import os
import sys
import time

import requests

from docopt import docopt
args = docopt(__doc__, version='0.1')

g_api_key = args["--key"] or os.environ.get("MIDAR_API_KEY", None)
if not g_api_key:
   print("ERROR: missing --key or $MIDAR_API_KEY", file=sys.stderr)
   sys.exit(1)   

g_base_url = args["--url"]
g_debug = args["--debug"]

try:
   g_timeout = int(args["--timeout"])
   if g_timeout < 0: raise RuntimeError
except:
   print("ERROR: invalid --timeout argument; must be a number >= 0",
         file=sys.stderr)
   sys.exit(1)


#===========================================================================
# MAIN
#===========================================================================

params = {'key': g_api_key}

if args["upload"]:
   files = {'file': open(args["<TARGET_PATH>"], "rb")}
   if args["--name"] is not None:
      params['task_name'] = args["--name"]

   r = requests.post(g_base_url + "/upload", files=files, params=params,
                     timeout=g_timeout)

elif args["status"]:
   params['id'] = args["<RESULT_ID>"]
   r = requests.get(g_base_url + "/status", params=params, timeout=g_timeout)

elif args["get"]:
   params['id'] = args["<RESULT_ID>"]
   r = requests.get(g_base_url + "/get", params=params, timeout=g_timeout,
                    stream=True)

print("URL:", r.url)
print("HTTP response code:", r.status_code)

if args["get"]:
   out_path = args["--out"] or ("midar-{}.sets".format(args["<RESULT_ID>"]))
   with open(out_path, 'wb') as fd:
    for chunk in r.iter_content(chunk_size=16384):
        fd.write(chunk)

   exit(0)

print("HTTP response body:", r.text)
print()

result = r.json()

if result["result"] == "error":
   print("request error:", result["message"])
   sys.exit(1)

if args["upload"]:
   print("result ID: {}".format(result["result_id"]))

elif args["status"]:
   print("status:", result["status"])
   print("task name:", result["task_name"])

   created = time.ctime(result["created"])
   print("submission date:", created)

   if result["status"] == "queued":
      pass

   elif result["status"] == "inprogress":
      updated = time.ctime(result["updated"])
      print("update date:", updated)

   elif result["status"] == "finished":
      completed = time.ctime(result["ended"])
      print("completion date:", completed)
      print("found aliases:", result["found_aliases"])

   elif result["status"] == "error":
      print("message:", result["message"])

   else:
      print("ERROR: invalid status '{}'".format(result["status"]))
